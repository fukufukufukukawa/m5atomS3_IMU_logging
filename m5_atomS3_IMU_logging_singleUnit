#include "M5AtomS3.h"
//#include <M5Unified.h>

//https://craft-gogo.com/m5stack-timer-interrupt/
//シリアルで表示するには USB CDC On Boot をEnabledにすること
//書き込み時にシリアル通信中だと書き込み失敗するので、リセットボタンを長押しすること（緑色のLED点灯までまつ）
//https://qiita.com/MuAuan/items/8dacc75b2e94fc644798
//https://homemadegarbage.com/reactionwheel03
//https://lang-ship.com/blog/work/m5unified-1/     M5unifiedについて

// PCと接続して、teratermで受信することを前提にシリアルで計測結果を出力する。

hw_timer_t* timer = NULL;
volatile uint32_t counter = 0;
volatile uint32_t current_time = 0;
uint32_t time_zero = 0;
volatile uint8_t get_req = 0;
volatile uint8_t timer_reset_req = 0;

volatile uint8_t button_state = 0;
int8_t time_set0_req = 0;
float ax, ay, az, gx, gy, gz, t;

//ボタンが押されたらタイマー表示を０にリセットする。

void onTimer() {
  counter++;
  //current_time = millis();
//  Serial.printf("No. %u, %u ms\n", counter, current_time);
  get_req = 1;
}

void get_imu() {
  float time ;
  current_time = millis();
  M5.Imu.getAccel(&ax, &ay, &az);
  M5.Imu.getGyro(&gx, &gy, &gz);
  if (time_set0_req == 1) {
    time_set0_req = 0;
    time_zero = current_time;
    Serial.print("Reset \n Time , Ax, Ay, Az , Gx , Gy , Gz \n");

  }
  time = ((float)(current_time - time_zero))/1000;
  Serial.printf("%.3f , %.3f , %.3f, %.3f  , %.3f, %.3f, %.3f \n",time,ax*9.8,ay*9.8,az*9.8,gx,gy,gz);
}

void setup() {
  // put your setup code here, to run once:
  auto cfg = M5.config();
  AtomS3.begin(cfg);

  Serial.begin(115200);
  AtomS3.Display.setTextColor(GREEN);
  AtomS3.Display.setTextDatum(middle_center);
  AtomS3.Display.setTextFont(&fonts::Orbitron_Light_24);
  AtomS3.Display.setTextSize(1);
  AtomS3.Display.drawString("Logging!", AtomS3.Display.width() / 2,
                            AtomS3.Display.height() / 2);
//  Serial.println("Click BtnA to Test");


  // タイマ作成
  timer = timerBegin(0, 80, true);
  // タイマ割り込みサービス・ルーチン onTimer を登録
  timerAttachInterrupt(timer, &onTimer, true);
  // 割り込みタイミング(ms)の設定
//  timerAlarmWrite(timer, 100000, true);//100ms
  timerAlarmWrite(timer, 8000, true);  //8ms
  // タイマ有効化
  timerAlarmEnable(timer);

  button_state = 1;
}

void loop() {
  // put your main code here, to run repeatedly:

  AtomS3.update();
  if (AtomS3.BtnA.wasPressed()) {
    AtomS3.Display.clear();
    AtomS3.Display.drawString("Pause", AtomS3.Display.width() / 2,
                              AtomS3.Display.height() / 2);
    Serial.println("\nPause");
    button_state = 0;
  }
  if (AtomS3.BtnA.wasReleased()) {
    AtomS3.Display.clear();
    AtomS3.Display.drawString("Logging", AtomS3.Display.width() / 2,
                              AtomS3.Display.height() / 2);
//    Serial.println("Logging");
    button_state = 1;
  }

  if (button_state == 0) {
    time_set0_req = 1;
  } else if (get_req == 1) {
    get_req =0;
    get_imu();
  }
}
