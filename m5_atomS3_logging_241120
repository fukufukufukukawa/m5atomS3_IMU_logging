
// If you use Unit OLED, write this.
// #include <M5UnitOLED.h>

// If you use Unit LCD, write this.
// #include <M5UnitLCD.h>


// Include this to enable the M5 global instance.
#include <M5Unified.h>

// Strength of the calibration operation;
// 0: disables calibration.
// 1 is weakest and 255 is strongest.
static constexpr const uint8_t calib_value = 64;


// This sample code performs calibration by clicking on a button or screen.
// After 10 seconds of calibration, the results are stored in NVS.
// The saved calibration values are loaded at the next startup.
// 
// === How to calibration ===
// ※ Calibration method for Accelerometer
//    Change the direction of the main unit by 90 degrees
//     and hold it still for 2 seconds. Repeat multiple times.
//     It is recommended that as many surfaces as possible be on the bottom.
//
// ※ Calibration method for Gyro
//    Simply place the unit on a quiet desk and hold it still.
//    It is recommended that this be done after the accelerometer calibration.
// 
// ※ Calibration method for geomagnetic sensors
//    Rotate the main unit slowly in multiple directions.
//    It is recommended that as many surfaces as possible be oriented to the north.
// 
// Values for extremely large attitude changes are ignored.
// During calibration, it is desirable to move the device as gently as possible.

struct rect_t
{
  int32_t x;
  int32_t y;
  int32_t w;
  int32_t h;
};

hw_timer_t* timer = NULL;
volatile uint32_t counter = 0;
volatile uint32_t current_time = 0;
uint32_t time_zero = 0;
volatile uint8_t get_req = 0;
volatile uint8_t timer_reset_req = 0;
volatile uint8_t button_state = 0;
int8_t time_set0_req = 0;
float ax, ay, az, gx, gy, gz, t;
float axs[5];
float ays[5];


void get_imu() {
  float time_data ;
  current_time = millis();

  M5.Imu.getAccel(&ax, &ay, &az);
  M5.Imu.getGyro(&gx, &gy, &gz);
  if (time_set0_req == 1) {
    time_set0_req = 0;
//    time_zero = round(current_time/8)*8;
        time_zero = current_time;
    Serial.print("\n\nReset \n Time , Ax, Ay, Az , Gx , Gy , Gz \n");

  }
  

    time_data = ((float)(current_time - time_zero))/1000;
      if(time_data>=2){
//  Serial.printf("%.3f , %.3f , %.3f, %.3f  , %.3f, %.3f, %.3f \n",time_data,ax*9.8,ay*9.8,az*9.8,gx,gy,gz);
  Serial.printf("%.3f , %.3f , %.3f, %.3f  , %.3f, %.3f, %.3f \n",time_data,ay*9.8,-ax*9.8,az*9.8,gy,-gx,gz);
  }
  drawAcc(ay,-ax);
}

static constexpr const uint32_t color_tbl[18] = 
{
0xFF0000u, 0xCCCC00u, 0xCC00FFu,
0xFFCC00u, 0x00FF00u, 0x0088FFu,
0xFF00CCu, 0x00FFCCu, 0x0000FFu,
0xFF0000u, 0xCCCC00u, 0xCC00FFu,
0xFFCC00u, 0x00FF00u, 0x0088FFu,
0xFF00CCu, 0x00FFCCu, 0x0000FFu,
};
static constexpr const float coefficient_tbl[3] = { 0.5f, (1.0f / 256.0f), (1.0f / 1024.0f) };

static auto &dsp = (M5.Display);
static rect_t rect_graph_area;
static rect_t rect_text_area;

static uint8_t calib_countdown = 0;

static int prev_xpos[18];

void drawBar(int32_t ox, int32_t oy, int32_t nx, int32_t px, int32_t h, uint32_t color)
{
  uint32_t bgcolor = (color >> 3) & 0x1F1F1Fu;
  if (px && ((nx < 0) != (px < 0)))
  {
    dsp.fillRect(ox, oy, px, h, bgcolor);
    px = 0;
  }
  if (px != nx)
  {
    if ((nx > px) != (nx < 0))
    {
      bgcolor = color;
    }
    dsp.setColor(bgcolor);
    dsp.fillRect(nx + ox, oy, px - nx, h);
  }
}

void drawAcc(float axg,float ayg)
{
  
  dsp.startWrite();
  dsp.fillCircle(64-ays[4]*128,64-axs[4]*128,6,BLACK);
  dsp.fillCircle(64-ayg*128,64-axg*128,6,YELLOW);
//  dsp.drawCircle(64,64,32,YELLOW);
//  dsp.drawCircle(64,64,6,YELLOW);
  dsp.drawCircle(64,64,13,DARKGREY);//0.1g
//  dsp.drawCircle(64,64,18,YELLOW);
  dsp.drawCircle(64,64,26,YELLOW);//0.2g
  dsp.drawCircle(64,64,39,RED);//0.3g
  dsp.drawCircle(64,64,51,YELLOW);//0.4g
  dsp.drawCircle(64,64,64,DARKGREY);//0.5g

  dsp.drawFastVLine(64,0,128,DARKGREY);
  dsp.drawFastHLine(0,64,128,DARKGREY);
    dsp.endWrite();

  axs[4]=axs[3];
  axs[3]=axs[2];
  axs[2]=axs[1];
  axs[1]=axs[0];
  axs[0]=axg;
  
  ays[4]=ays[3];
  ays[3]=ays[2];
  ays[2]=ays[1];
  ays[1]=ays[0];
  ays[0]=ayg;
}


/*
void drawGraph(const rect_t& r, const m5::imu_data_t& data)
{
  float aw = (128 * r.w) >> 1;
  float gw = (128 * r.w) / 256.0f;
  float mw = (128 * r.w) / 1024.0f;
  int ox = (r.x + r.w)>>1;
  int oy = r.y;
  int h = (r.h / 18) * (calib_countdown ? 1 : 2);
  int bar_count = 9 * (calib_countdown ? 2 : 1);

  dsp.startWrite();
  for (int index = 0; index < bar_count; ++index)
  {
    float xval;
    if (index < 9)
    {
      auto coe = coefficient_tbl[index / 3] * r.w;
      xval = data.value[index] * coe;
    }
    else
    {
      xval = M5.Imu.getOffsetData(index - 9) * (1.0f / (1 << 19));
    }

    // for Linear scale graph.
    float tmp = xval;

    // The smaller the value, the larger the amount of change in the graph.
//  float tmp = sqrtf(fabsf(xval * 128)) * (signbit(xval) ? -1 : 1);

    int nx = tmp;
    int px = prev_xpos[index];
    if (nx != px)
    prev_xpos[index] = nx;
    drawBar(ox, oy + h * index, nx, px, h - 1, color_tbl[index]);
  }
  dsp.endWrite();
}
*/

/*
void updateCalibration(uint32_t c, bool clear = false)
{
  calib_countdown = c;

  if (c == 0) {
    clear = true;
  }

  if (clear)
  {
    memset(prev_xpos, 0, sizeof(prev_xpos));
    dsp.fillScreen(TFT_BLACK);

    if (c)
    { // Start calibration.
      M5.Imu.setCalibration(calib_value, calib_value, calib_value);
    // ※ The actual calibration operation is performed each time during M5.Imu.update.
    // 
    // There are three arguments, which can be specified in the order of Accelerometer, gyro, and geomagnetic.
    // If you want to calibrate only the Accelerometer, do the following.
    // M5.Imu.setCalibration(100, 0, 0);
    //
    // If you want to calibrate only the gyro, do the following.
    // M5.Imu.setCalibration(0, 100, 0);
    //
    // If you want to calibrate only the geomagnetism, do the following.
    // M5.Imu.setCalibration(0, 0, 100);
    }
    else
    { // Stop calibration. (Continue calibration only for the geomagnetic sensor)
      M5.Imu.setCalibration(0, 0, calib_value);

      // If you want to stop all calibration, write this.
      // M5.Imu.setCalibration(0, 0, 0);

      // save calibration values.
      M5.Imu.saveOffsetToNVS();
    }
  }

  auto backcolor = (c == 0) ? TFT_BLACK : TFT_BLUE;
  dsp.fillRect(rect_text_area.x, rect_text_area.y, rect_text_area.w, rect_text_area.h, backcolor);

  if (c)
  {
    dsp.setCursor(rect_text_area.x + 2, rect_text_area.y + 1);
    dsp.setTextColor(TFT_WHITE, TFT_BLUE);
    dsp.printf("Countdown:%d ", c);
  }
}
*/

/*
void startCalibration(void)
{
  updateCalibration(10, true);
}
*/
void onTimer() {
  counter++;
  get_req = 1;
}

void setup(void)
{
  auto cfg = M5.config();

  // If you want to use external IMU, write this
//cfg.external_imu = true;

  M5.begin(cfg);

  const char* name;
  auto imu_type = M5.Imu.getType();
  switch (imu_type)
  {
  case m5::imu_none:        name = "not found";   break;
  case m5::imu_sh200q:      name = "sh200q";      break;
  case m5::imu_mpu6050:     name = "mpu6050";     break;
  case m5::imu_mpu6886:     name = "mpu6886";     break;
  case m5::imu_mpu9250:     name = "mpu9250";     break;
  case m5::imu_bmi270:      name = "bmi270";      break;
  default:                  name = "unknown";     break;
  };
  //M5_LOGI("imu:%s", name);
  //M5.Display.printf("imu:%s", name);

  if (imu_type == m5::imu_none)
  {
    for (;;) { delay(1); }
  }

  int32_t w = dsp.width();
  int32_t h = dsp.height();
  if (w < h)
  {
    dsp.setRotation(dsp.getRotation() ^ 1);
    w = dsp.width();
    h = dsp.height();
  }
  int32_t graph_area_h = ((h - 8) / 18) * 18;
  int32_t text_area_h = h - graph_area_h;
  float fontsize = text_area_h / 8;
  dsp.setTextSize(fontsize);

  rect_graph_area = { 0, 0, w, graph_area_h };
  rect_text_area = {0, graph_area_h, w, text_area_h };

/*
  // Read calibration values from NVS.
  if (!M5.Imu.loadOffsetFromNVS())
  {
    startCalibration();
  }
 */
 
  // タイマ作成
  timer = timerBegin(0, 80, true);
  // タイマ割り込みサービス・ルーチン onTimer を登録
  timerAttachInterrupt(timer, &onTimer, true);
  // 割り込みタイミング(ms)の設定
//  timerAlarmWrite(timer, 100000, true);//100ms
  timerAlarmWrite(timer, 8000, true);  //8ms
//  timerAlarmWrite(timer, 5000, true);  //8ms
  // タイマ有効化
  timerAlarmEnable(timer);

  button_state = 1;

  time_set0_req=1;


  
//    M5.Display.printf("LOGGING:");

}

void loop(void)
{

  if (get_req == 1) {
    /*8msごとにコール*/
    get_req =0;
    get_imu();
  }
}
